(* module type RENDER = sig *)
(*   type msg = UpdateRafId of Webapi.rafId | StopRendering *)
(*   type model *)
(**)
(*   val init : string -> model *)
(*   val update : model -> msg -> model * 'a Tea.Cmd.t *)
(*   val view : model -> 'a Tea.Vdom.t *)
(*   val render : model -> ?key:string -> (msg -> 'a) -> 'a Tea.Sub.t *)
(*   (* val start : model -> 'a Tea.Cmd.t *) *)
(*   (* val stop : model -> 'a Tea.Cmd.t *) *)
(* end *)
(**)
(* module Render : RENDER = struct *)
(*   open Tea *)
(*   open Tea.Html *)
(**)
(*   type msg = UpdateRafId of Webapi.rafId | StopRendering *)
(**)
(*   (* type model = { id : string; raf_id : Webapi.rafId option ref } *) *)
(*   type model = { id : string; raf_id : Webapi.rafId option } *)
(**)
(*   (* let init id = { id; raf_id = ref None } *) *)
(*   let init id = { id; raf_id = None } *)
(**)
(*   let update model msg = *)
(*     match msg with *)
(*     | UpdateRafId raf_id -> ({ model with raf_id = Some raf_id }, Cmd.none) *)
(*     | StopRendering  -> ({ model with raf_id = None }, Cmd. *)
(**)
(*   let view model = canvas [ id model.id; width "1024"; height "1024" ] [] *)
(**)
(*   (* let delay msTime msg = *) *)
(*   (*   Cmd.call (fun callbacks -> *) *)
(*   (*       let _unhandledID = *) *)
(*   (*         Web.Window.setTimeout (fun () -> !callbacks.enqueue msg) msTime *) *)
(*   (*       in *) *)
(*   (*       ()) *) *)
(**)
(*   let render model ?(key = "") tagger = *)
(*     Sub.registration key (fun callbacks -> *)
(*         let open Webapi in *)
(*         let open Hello.Async in *)
(*         let open Hello in *)
(*         (* let raf_id = ref None in *) *)
(*         let start_rendering () = *)
(*           let* images = load_images "interdim" 20 in *)
(**)
(*           let ctx = *)
(*             Dom.Document.getElementById model.id Dom.document *)
(*             |> Option.get |> Canvas.CanvasElement.getContext2d *)
(*           in *)
(**)
(*           let rec render_loop time = *)
(*             tick ctx images (time /. 1000. *. 0.5); *)
(**)
(*             callbacks.enqueue *)
(*               (tagger *)
(*                  (UpdateRafId *)
(*                     (Webapi.requestCancellableAnimationFrame (fun time -> *)
(*                          render_loop time |> ignore)))) *)
(*           in *)
(**)
(*           Js.log "starting rendering"; *)
(**)
(*           render_loop 0. |> ignore; *)
(**)
(*           Promise.resolved () *)
(*         in *)
(**)
(*         ignore (start_rendering ()); *)
(**)
(*         fun () -> *)
(*           Js.log "stopping rendering"; *)
(*           callbacks.enqueue (tagger StopRendering); *)
(*           match !raf_id with *)
(*           | Some raf_id -> *)
(*               Js.log "cancelling rendering"; *)
(*               Webapi.cancelAnimationFrame raf_id *)
(*           | None -> ()) *)
(**)
(*   (* let start model = *) *)
(*   (*   Cmd.call (fun _callbacks -> *) *)
(*   (*       let open Webapi in *) *)
(*   (*       let open Hello.Async in *) *)
(*   (*       let open Hello in *) *)
(*   (*       let start_rendering () = *) *)
(*   (*         let* images = load_images "interdim" 20 in *) *)
(*   (**) *)
(*   (*         let ctx = *) *)
(*   (*           Dom.Document.getElementById model.id Dom.document *) *)
(*   (*           |> Option.get |> Canvas.CanvasElement.getContext2d *) *)
(*   (*         in *) *)
(*   (**) *)
(*   (*         let rec render_loop time = *) *)
(*   (*           tick ctx images (time /. 1000. *. 0.5); *) *)
(*   (**) *)
(*   (*           model.raf_id := *) *)
(*   (*             Some *) *)
(*   (*               (Webapi.requestCancellableAnimationFrame (fun time -> *) *)
(*   (*                    render_loop time |> ignore)) *) *)
(*   (*         in *) *)
(*   (**) *)
(*   (*         Js.log "starting rendering"; *) *)
(*   (**) *)
(*   (*         render_loop 0. |> ignore; *) *)
(*   (**) *)
(*   (*         Promise.resolved () *) *)
(*   (*       in *) *)
(*   (**) *)
(*   (*       ignore (start_rendering ()); *) *)
(*   (**) *)
(*   (*       ()) *) *)
(*   (**) *)
(*   (* let stop model = *) *)
(*   (*   Cmd.call (fun _callbacks -> *) *)
(*   (*       Js.log "stopping rendering"; *) *)
(*   (*       match !(model.raf_id) with *) *)
(*   (*       | Some raf_id -> *) *)
(*   (*           Js.log "cancelling rendering"; *) *)
(*   (*           Webapi.cancelAnimationFrame raf_id; *) *)
(*   (*           model.raf_id := None *) *)
(*   (*       | None -> ()) *) *)
(**)
(*   (* let render model ?(key = "") _tagger = *) *)
(*   (*   Sub.registration key (fun _callbacks -> *) *)
(*   (*       let open Webapi in *) *)
(*   (*       let open Hello.Async in *) *)
(*   (*       let open Hello in *) *)
(*   (*       let raf_id = ref None in *) *)
(*   (**) *)
(*   (*       let start_rendering () = *) *)
(*   (*         let* images = load_images "interdim" 20 in *) *)
(*   (**) *)
(*   (*         let ctx = *) *)
(*   (*           Dom.Document.getElementById model.id Dom.document *) *)
(*   (*           |> Option.get |> Canvas.CanvasElement.getContext2d *) *)
(*   (*         in *) *)
(*   (**) *)
(*   (*         let rec render_loop time = *) *)
(*   (*           tick ctx images (time /. 1000. *. 0.5); *) *)
(*   (**) *)
(*   (*           raf_id := *) *)
(*   (*             Some *) *)
(*   (*               (Webapi.requestCancellableAnimationFrame (fun time -> *) *)
(*   (*                    render_loop time |> ignore)) *) *)
(*   (*         in *) *)
(*   (**) *)
(*   (*         Js.log "starting rendering"; *) *)
(*   (**) *)
(*   (*         render_loop 0. |> ignore; *) *)
(*   (**) *)
(*   (*         Promise.resolved () *) *)
(*   (*       in *) *)
(*   (**) *)
(*   (*       ignore (start_rendering ()); *) *)
(*   (**) *)
(*   (*       fun () -> *) *)
(*   (*         Js.log "stopping rendering"; *) *)
(*   (*         match !raf_id with *) *)
(*   (*         | Some raf_id -> *) *)
(*   (*             Js.log "cancelling rendering"; *) *)
(*   (*             Webapi.cancelAnimationFrame raf_id *) *)
(*   (*         | None -> ()) *) *)
(* end *)
(**)
(* include Render *)
